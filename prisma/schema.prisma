// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  ADMIN_CLIENT
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Doctor Data
model Doctor {
  id          String        @id @default(cuid())
  name        String
  Schedule    Schedule[]
  Consultancy Consultancy[]
}

// Patient Data
model Patient {
  id          String        @id @default(cuid())
  name        String
  phone       String        @unique
  Consultancy Consultancy[]
}

// To manage schedule of doctor
model Schedule {
  id       BigInt @id @default(autoincrement())
  doctor   Doctor @relation(fields: [doctorId], references: [id])
  doctorId String
  days     String
  timing   String
}

// To Manage Consultancy
model Consultancy {
  id        BigInt   @id @default(autoincrement())
  date      DateTime @default(now()) @db.Date
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  doctorId  String
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId String
  complete  Boolean  @default(false)
}
